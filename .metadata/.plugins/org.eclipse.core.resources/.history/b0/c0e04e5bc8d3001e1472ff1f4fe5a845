package com.rowdy.dino.graphics;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;

import com.rowdy.dino.Battle;
import com.rowdy.dino.DinoUtil;
import com.rowdy.dino.Main;
import com.rowdy.dino.entity.Dino;
import com.rowdy.dino.entity.Entity;
import com.rowdy.dino.entity.Move;

public class BattleScene extends Scene {
	
	public static int HEALTH_BAR_WIDTH = 150;
	
	private BufferedImage background;
	private BufferedImage dialogue;
	private Battle battle = null;
	private boolean showDialogue = true;
	
	public BattleScene() {
		try {
            String imagePath = "./images/background.png";
            File file = new File(imagePath);
            background = ImageIO.read(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
		try {
            String imagePath = "./images/dialogue.png";
            File file = new File(imagePath);
            dialogue = ImageIO.read(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
	
	@Override
	public void tick() {
		if(battle.getBot().health <= 0) {
			Main.setScene(Main.winScene);
			battle = null;
		}
	}
	
	@Override
	public void render(Graphics g) {
		g.drawImage(background, 100, 0, null);
		
		if(battle != null) {
			Entity player = battle.getPlayer();
			Dino playerDino = player.getDino();
			Move[] moves = playerDino.getMoves();
			
			Entity bot = battle.getBot();
			Dino botDino = bot.getDino();

			g.drawImage(playerDino.getImage(), player.x, player.y, 150, 150, null);
			
			g.drawImage(botDino.getImage(), bot.x + 150, bot.y, -150, 150, null);
			
			g.setColor(Color.white);
			g.setFont(new Font("SansSerif", 1, 12));
			
			g.drawString(playerDino.getName(), player.x + 25, player.y - 20);
			g.drawString(botDino.getName(), bot.x + 25, bot.y - 20);
			
			g.setColor(Color.red);
			g.fillRect(player.x, player.y - 10, HEALTH_BAR_WIDTH, 15);
			g.fillRect(bot.x, bot.y - 10, HEALTH_BAR_WIDTH, 15);

			g.setColor(Color.green);
			g.fillRect(bot.x, bot.y - 10, (int)(((double)bot.health / 100.0) * HEALTH_BAR_WIDTH), 15);
			g.fillRect(player.x, player.y - 10, (int)(((double)player.health / 100.0) * HEALTH_BAR_WIDTH), 15);

			// Show dialogue if players turn
			if(showDialogue) {
				g.drawImage(dialogue, 200, 20, null);
				
				
				g.setColor(Color.black);
				g.setFont(new Font("SansSerif", 1, 12));
				for(int i = 0; i < moves.length; i++) {
					Move m = moves[i];
					
					Color textColor = DinoUtil.getTextColorFromAttackType(m.getType());
					
					g.setColor(textColor);
					g.drawString("(" + (i + 1) + ") " + m.getName() + " (" + m.getType() + ")", 240, 45 + (i * 40));
					
					g.setColor(Color.black);
					g.drawString(m.getDescription(), 240, 45 + 18 + (i * 40));
					
					g.drawString("Press the corresponding number key on the keyboard to use an attack", 240, 180);
				}
			}
		}
	}
	
	public void startBattle(Entity player, Entity bot) {
		battle = new Battle(player, bot);
	}
	
	public void attack(Entity attacker, Entity victim, int amount, String attackType) {
		victim.damage(amount);
	}
	
	@Override
	public void keyPressed(int keyCode) {
		if(battle.turn == 1 && (keyCode == KeyEvent.VK_1 || keyCode == KeyEvent.VK_2 || keyCode == KeyEvent.VK_3)) {
			Entity bot = battle.getBot();
			Entity player = battle.getPlayer();
			
			Move[] playerMoves = player.getDino().getMoves();
			Move[] botMoves = bot.getDino().getMoves();
			
			if(keyCode == KeyEvent.VK_1) {
				String attackType = playerMoves[0].getType();
				attack(player, bot, new Random().nextInt(40), attackType);
			} else if(keyCode == KeyEvent.VK_2) {
				String attackType = playerMoves[1].getType();
				attack(player, bot, new Random().nextInt(40), attackType);
			} else if(keyCode == KeyEvent.VK_3) {
				String attackType = playerMoves[2].getType();
				attack(player, bot, new Random().nextInt(40), attackType);
			}
			
			battle.turn = 2;
			showDialogue = false;
			
			Runnable botTurn = new Runnable() {
				public void run() {
					if(battle != null) {
						Move m = botMoves[new Random().nextInt(botMoves.length)];
						attack(battle.getBot(), battle.getPlayer(), new Random().nextInt(3), m.getType());
						battle.turn = 1;
					}
				}
			};
			
			Runnable reshowDialogue = new Runnable() {
				public void run() {
					if(battle != null) {
						showDialogue = true;
					}
				}
			};

			Main.scheduler.scheduleTask(botTurn, 1200);
			Main.scheduler.scheduleTask(reshowDialogue, 1700);
		}
	}
	
	public void doBotMove() {
		String attackType = battle.getPlayer().getDino().getMoves()[0].getType();
		attack(battle.getPlayer(), battle.getBot(), 5, attackType);
		battle.turn = 1;
	}
}
